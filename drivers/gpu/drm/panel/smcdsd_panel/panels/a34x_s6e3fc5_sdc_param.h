/* SPDX-License-Identifier: GPL-2.0 */
#ifndef __S6E3FC5_SDC_PARAM_H__
#define __S6E3FC5_SDC_PARAM_H__

#include <linux/types.h>
#include <drm/drm_mipi_dsi.h>

#include "../smcdsd_dsi_msg.h"
#include "a34x_s6e3fc5_sdc_param_brightness.h"

#define LCD_TYPE_VENDOR		"SDC"

#define UI_MAX_BRIGHTNESS	255
#define UI_DEFAULT_BRIGHTNESS	128

#define NORMAL_TEMPERATURE	25	/* 25 degrees Celsius */

#define LDI_REG_BRIGHTNESS			0x51
#define LDI_REG_ID				0xDA

#define LDI_LEN_ID				3
#define LDI_LEN_MANUFACTURE_INFO		RANGE_LENGTH(12:15)	/* A1h 12 ... 15 */
#define LDI_LEN_MANUFACTURE_INFO_CELL_ID	RANGE_LENGTH(23:38)	/* 97h 23 ... 38 */

static u8 BUF_COORDINATE[RANGE_LENGTH(1:4)];							/* A1h 1 ... 4 */
static u8 BUF_DATE[RANGE_LENGTH(5:11)];								/* A1h 5 ... 11 */
static u8 BUF_MANUFACTURE_INFO[LDI_LEN_MANUFACTURE_INFO + LDI_LEN_MANUFACTURE_INFO_CELL_ID];
static u8 BUF_CODE[RANGE_LENGTH(1:5)];								/* D6h 1 ... 5 */

DEFINE_RXBUF(A1, 15);		/* static unsigned char RX_BUF_A1[15 + 1] = {0xA1, }; for A1h 1 ... 15 */
DEFINE_POINT_GPARA(A1, 1);
DEFINE_POINT_GPARA(A1, 5);	/* static unsigned char RX_GPARA_A1_5[] = { 0xB0, 0, 5-1, 0xA1 }; */
DEFINE_POINT_GPARA(A1, 12);

DEFINE_RXBUF(97, 38);
DEFINE_POINT_GPARA(97, 23);	/* for 97h 23 ... 32 */
DEFINE_POINT_GPARA(97, 33);	/* for 97h 33 ... 38 */

DEFINE_RXBUF(D6, 5);

static inline void fill_fac_lcd_info(int unused)
{
	uintptr_t fac_lcd_info_list[] = {
		(uintptr_t)&BUF_COORDINATE,				(uintptr_t)&RX_BUF_A1[1],	RANGE_LENGTH(1:4),
		(uintptr_t)&BUF_DATE,					(uintptr_t)&RX_BUF_A1[5],	RANGE_LENGTH(5:11),
		(uintptr_t)&BUF_MANUFACTURE_INFO,			(uintptr_t)&RX_BUF_A1[12],	RANGE_LENGTH(12:15),
		(uintptr_t)&BUF_MANUFACTURE_INFO[RANGE_LENGTH(12:15)],	(uintptr_t)&RX_BUF_97[23],	RANGE_LENGTH(23:38),
		(uintptr_t)&BUF_CODE,					(uintptr_t)&RX_BUF_D6[1],	RANGE_LENGTH(1:5)
	};

	int i;

	for (i = 0; i < ARRAY_SIZE(fac_lcd_info_list); i += 3)
		memcpy((void *)fac_lcd_info_list[i + 0], (void *)fac_lcd_info_list[i + 1], fac_lcd_info_list[i + 2]);
}

static struct msg_segment MSG_S6E3FC5_SDC_FAC_INFO[] = {
	{MSG_TX(RX_GPARA_A1_1)},
	{MSG_RX(RX_BUF_A1, 1:4), },

	{MSG_TX(RX_GPARA_A1_5)},
	{MSG_RX(RX_BUF_A1, 5:11), },

	{MSG_TX(RX_GPARA_A1_12)},
	{MSG_RX(RX_BUF_A1, 12:15), },

	{MSG_TX(RX_GPARA_97_23)},
	{MSG_RX(RX_BUF_97, 23:32), },

	{MSG_TX(RX_GPARA_97_33)},
	{MSG_RX(RX_BUF_97, 33:38), },

	{MSG_RX(RX_BUF_D6, 1:5), .cb = fill_fac_lcd_info, },
};

DEFINE_RXBUF(05, 1);
DEFINE_RXBUF(0A, 1);
DEFINE_RXBUF(0E, 1);
DEFINE_RXBUF(0F, 1);
DEFINE_RXBUF(EE, 1);
DEFINE_RXBUF(E9, 2);

enum {
	LDI_BIT_ENUM_05,	LDI_BIT_ENUM_RDNUMPE = LDI_BIT_ENUM_05,
	LDI_BIT_ENUM_0A,	LDI_BIT_ENUM_RDDPM = LDI_BIT_ENUM_0A,
	LDI_BIT_ENUM_0E,	LDI_BIT_ENUM_RDDSM = LDI_BIT_ENUM_0E,
	LDI_BIT_ENUM_0F,	LDI_BIT_ENUM_RDDSDR = LDI_BIT_ENUM_0F,
	LDI_BIT_ENUM_EE,	LDI_BIT_ENUM_ESDERR = LDI_BIT_ENUM_EE,
	LDI_BIT_ENUM_E9,	LDI_BIT_ENUM_DSIERR = LDI_BIT_ENUM_E9,
	LDI_BIT_ENUM_9F,	LDI_BIT_ENUM_RDERRFLAG = LDI_BIT_ENUM_9F,
	LDI_BIT_ENUM_MAX
};

static char *LDI_BIT_DESC_05[BITS_PER_BYTE] = {
	[0 ... 6] = "number of corrupted packets",
	[7] = "overflow on number of corrupted packets",
};

static char *LDI_BIT_DESC_0A[BITS_PER_BYTE] = {
	[2] = "Display is Off",
	[7] = "Booster Off or has a fault",
};

static char *LDI_BIT_DESC_0E[BITS_PER_BYTE] = {
	[0] = "Error on DSI",
};

static char *LDI_BIT_DESC_0F[BITS_PER_BYTE] = {
	[7] = "Register Loading Detection",
};

static char *LDI_BIT_DESC_EE[BITS_PER_BYTE] = {
	[2] = "VLIN3 error",
	[3] = "ELVDD error",
	[6] = "VLIN1 error",
};

static char *LDI_BIT_DESC_E9[BITS_PER_BYTE * 2] = {
	[0] = "SoT Error",
	[1] = "SoT Sync Error",
	[2] = "EoT Sync Error",
	[3] = "Escape Mode Entry Command Error",
	[4] = "Low-Power Transmit Sync Error",
	[5] = "HS RX Timeout",
	[6] = "False Control Error",
	[7] = "Data Lane Contention Detection",
	[8] = "ECC Error, single-bit (detected and corrected)",
	[9] = "ECC Error, multi-bit (detected, not corrected)",
	[10] = "Checksum Error(Long Packet Only",
	[11] = "DSI Data Type Not Recognized",
	[12] = "DSI VC ID Invalid",
	[13] = "Invalid Transmission Length",
//	[14] = "Reserved",
	[15] = "DSI Protocol Violation",
};

static char *LDI_BIT_DESC_9F[BITS_PER_BYTE * 2] = {
//	[0] = "UCS_CHK",	/* UCS checksum Error flag */
//	[1] = "VGHL_CHK",	/* VGH, VGL Level Error flag */
	[2] = "INPWR_CHK",	/* Input level error flag */
//	[3] = "PS_CHK",		/* Power sequence Error flag */
//	[4] = "HS_CHK",		/* Hsync Time out flag */
//	[5] = "VS_CHK",		/* Vsync Time out flag */
	[6] = "FMEM0_CHK",	/* Frame memory write/read CRC Error flag */
//	[8] = "PCD_OUT",	/* PCD output value */
};

static struct abd_bit_info ldi_bit_info_list[LDI_BIT_ENUM_MAX] = {
	[LDI_BIT_ENUM_05] = {0x05, 1, LDI_BIT_DESC_05, 0x00, .u8_buf = &RX_BUF_05[1], },
	[LDI_BIT_ENUM_0A] = {0x0A, 1, LDI_BIT_DESC_0A, 0x9C, .u8_buf = &RX_BUF_0A[1], .invert = BIT(2) | BIT(7), },
	[LDI_BIT_ENUM_0E] = {0x0E, 1, LDI_BIT_DESC_0E, 0x00, .u8_buf = &RX_BUF_0E[1], },
	[LDI_BIT_ENUM_0F] = {0x0F, 1, LDI_BIT_DESC_0F, 0xC0, .u8_buf = &RX_BUF_0F[1], .invert = BIT(7), },
	[LDI_BIT_ENUM_EE] = {0xEE, 1, LDI_BIT_DESC_EE, 0xC0, .u8_buf = &RX_BUF_EE[1], },
	[LDI_BIT_ENUM_E9] = {0xE9, 2, LDI_BIT_DESC_E9, 0x00, .u8_buf = &RX_BUF_E9[1], },
	//[LDI_BIT_ENUM_9F] = {0x9F, 2, LDI_BIT_DESC_9F, 0x00, },
};

#if defined(CONFIG_SMCDSD_DPUI)
/*
 * ESD_ERROR[0] = MIPI DSI error is occurred by ESD.
 * ESD_ERROR[1] = HS CLK lane error is occurred by ESD.
 * ESD_ERROR[2] = VLIN3 error is occurred by ESD.
 * ESD_ERROR[3] = ELVDD error is occurred by ESD.
 * ESD_ERROR[4] = CHECK_SUM error is occurred by ESD.
 * ESD_ERROR[5] = Internal HSYNC error is occurred by ESD.
 * ESD_ERROR[6] = VLIN1 error is occurred by ESD
 */

static struct abd_bit_info ldi_bit_dpui_list[] = {
	{0x05, .mask = GENMASK(7, 0), .dpui_key = DPUI_KEY_PNDSIE, },		/* panel dsi error count */
	{0x0F, .mask = BIT(7), .invert = BIT(7), .dpui_key = DPUI_KEY_PNSDRE, },	/* panel OTP loading error count */
	{0xEE, .mask = BIT(2), .dpui_key = DPUI_KEY_PNVLO3E, },			/* panel VLOUT3 error count */
	{0xEE, .mask = BIT(3), .dpui_key = DPUI_KEY_PNELVDE, },			/* panel ELVDD error count */
	{0xEE, .mask = BIT(6), .dpui_key = DPUI_KEY_PNVLI1E, },			/* panel VLIN1 error count */
	{0xEE, .mask = BIT(2)|BIT(3)|BIT(6), .dpui_key = DPUI_KEY_PNESDE, },	/* panel ESD error count */
};
#endif

static unsigned char S6E3FC5_SDC_SLEEP_OUT[] = { 0x11 };
static unsigned char S6E3FC5_SDC_SLEEP_IN[] = { 0x10 };
static unsigned char S6E3FC5_SDC_DISPLAY_OFF[] = { 0x28 };
static unsigned char S6E3FC5_SDC_DISPLAY_ON[] = { 0x29 };

static unsigned char S6E3FC5_SDC_TEST_KEY_ON_9F[] = { 0x9F, 0xA5, 0xA5 };
static unsigned char S6E3FC5_SDC_TEST_KEY_ON_F0[] = { 0xF0, 0x5A, 0x5A };
static unsigned char S6E3FC5_SDC_TEST_KEY_ON_FC[] = { 0xFC, 0x5A, 0x5A };

static unsigned char S6E3FC5_SDC_TEST_KEY_OFF_9F[] = { 0x9F, 0x5A, 0x5A };
static unsigned char S6E3FC5_SDC_TEST_KEY_OFF_F0[] = { 0xF0, 0xA5, 0xA5 };
static unsigned char S6E3FC5_SDC_TEST_KEY_OFF_FC[] = { 0xFC, 0xA5, 0xA5 };

static unsigned char S6E3FC5_SDC_BRIGHTNESS_DFT[] = {
	0x51,
	0x00, 0x00
};

static unsigned char S6E3FC5_SDC_TE_ON[] = {
	0x35,
	0x00
};

static unsigned char S6E3FC5_SDC_TE_130US_SHIFT[] = {
	0xB9,
	0x04, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x00, 0x0F	/* 1st 0x04,  2nd 0x09, 0x0F : 130us shift */
};

static unsigned char S6E3FC5_SDC_PAGE_ADDRESS_1[] = {
	0x2A,
	0x00, 0x00, 0x04, 0x37
};

static unsigned char S6E3FC5_SDC_PAGE_ADDRESS_2[] = {
	0x2B,
	0x00, 0x00, 0x09, 0x23
};

static unsigned char S6E3FC5_SDC_FFC_806_1[] = {
	0xB0,
	0x00, 0x3A, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_806_2[] = {
	0xC5,
	0x8F, 0xF6
};

static unsigned char S6E3FC5_SDC_FFC_806_3[] = {
	0xB0,
	0x00, 0x36, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_806_4[] = {
	0xC5,
	0x11, 0x10, 0x50, 0x05
};

static unsigned char S6E3FC5_SDC_FFC_822_1[] = {
	0xB0,
	0x00, 0x3A, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_822_2[] = {
	0xC5,
	0x8D, 0x28
};

static unsigned char S6E3FC5_SDC_FFC_822_3[] = {
	0xB0,
	0x00, 0x36, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_822_4[] = {
	0xC5,
	0x11, 0x10, 0x50, 0x05
};

static unsigned char S6E3FC5_SDC_FFC_824_1[] = {
	0xB0,
	0x00, 0x3A, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_824_2[] = {
	0xC5,
	0x8C, 0xD1
};

static unsigned char S6E3FC5_SDC_FFC_824_3[] = {
	0xB0,
	0x00, 0x36, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_824_4[] = {
	0xC5,
	0x11, 0x10, 0x50, 0x05
};

static unsigned char S6E3FC5_SDC_PANEL_UPDATE[] = {
	0xF7,
	0x0F
};

static unsigned char S6E3FC5_SDC_ERR_FG_1[] = {
	0xE5,
	0x15	/* 0x15 : ERR_FG Enable */
};

static unsigned char S6E3FC5_SDC_ERR_FG_2[] = {
	0xED,
	0x44	/* 1st 0x44 : Default High */
};

static unsigned char S6E3FC5_SDC_PCD[] = {
	0xCC,
	0x02,
	0x5C,	/* 2nd 0x5C : default high */
	0x51	/* 3rd 0x51 : enable SW Reset */
};

static unsigned char S6E3FC5_SDC_ACL_1[] = {
	0xB0,
	0x00, 0x3F, 0x66
};

static unsigned char S6E3FC5_SDC_ACL_2_DIMMING_32FRAME[] = {
	0x66,
	0x50, 0x50,	/* 1st , 2nd Para. */
			/* 0x40, 0x40 : 16 Frame Average */
			/* 0x50, 0x50 : 32 Frame Average */
	0x15, 0x55, 0x55, 0x55, 0x08, 0xF1, 0xC6, 0x48,
	0x30, 0x00, 0x51, 0x66, 0x98, 0x00,
	0x20,		/* 17th Para. */
			/* 0x00 : ACL Dimming Off */
			/* 0x20 : ACL 32 Frame Dimming */
	0x10,
	0xB0		/* 19th Para. 0xB0 : ACL Start Step 50% */
};

static unsigned char S6E3FC5_SDC_DSC_EN[] = {
//	0x07,
	0x01
};

static unsigned char S6E3FC5_SDC_DSC_PPS[] = {
//	0x9E,
	0x11, 0x00, 0x00, 0x89, 0x30, 0x80, 0x09, 0x24,
	0x04, 0x38, 0x00, 0x1E, 0x02, 0x1C, 0x02, 0x1C, 0x02,
	0x00, 0x02, 0x0E, 0x00, 0x20, 0x02, 0xE3, 0x00, 0x07,
	0x00, 0x0C, 0x03, 0x50, 0x03, 0x64, 0x18, 0x00, 0x10,
	0xF0, 0x03, 0x0C, 0x20, 0x00, 0x06, 0x0B, 0x0B, 0x33,
	0x0E, 0x1C, 0x2A, 0x38, 0x46, 0x54, 0x62, 0x69, 0x70,
	0x77, 0x79, 0x7B, 0x7D, 0x7E, 0x01, 0x02, 0x01, 0x00,
	0x09, 0x40, 0x09, 0xBE, 0x19, 0xFC, 0x19, 0xFA, 0x19,
	0xF8, 0x1A, 0x38, 0x1A, 0x78, 0x1A, 0xB6, 0x2A, 0xF6,
	0x2B, 0x34, 0x2B, 0x74, 0x3B, 0x74, 0x6B, 0xF4
};

static unsigned char S6E3FC5_SDC_ASWIRE_PULSE_OFF_1[] = {
	0xB0,
	0x00, 0x0A, 0xB5
};

static unsigned char S6E3FC5_SDC_ASWIRE_PULSE_OFF_2[] = {
	0xB5,
	0x00
};

static unsigned char S6E3FC5_SDC_VSYNC_ENABLE_1[] = {
	0xB0,
	0x00, 0x05, 0xF2
};

static unsigned char S6E3FC5_SDC_VSYNC_ENABLE_2[] = {
	0xF2,
	0xE8
};

static unsigned char S6E3FC5_SDC_VSYNC_ENABLE_3[] = {
	0xB0,
	0x00, 0x64, 0xB9
};

static unsigned char S6E3FC5_SDC_VSYNC_ENABLE_4[] = {
	0xB9,
	0xB8, 0x6E
};

static unsigned char S6E3FC5_SDC_VSYNC_ENABLE_5[] = {
	0xB0,
	0x00, 0x6A, 0xB9
};

static unsigned char S6E3FC5_SDC_VSYNC_ENABLE_6[] = {
	0xB9,
	0x00, 0x00, 0x04, 0x3D
};

static unsigned char S6E3FC5_SDC_COMMON_SETTING[] = {
	0xB5,
	0x48,
};

static unsigned char S6E3FC5_SDC_120HZ[] = {
	0x60,
	0x00, 0x00	/* 0x00 : 120Hz */
};

static unsigned char S6E3FC5_SDC_60HZ[] = {
	0x60,
	0x08, 0x00	/* 0x08 : 60Hz */
};

static unsigned char S6E3FC5_SDC_DIMMING_SPEED_NORMAL[] = {
	0x53,
	0x20	/* 0x20 : Normal transition */
};

static unsigned char S6E3FC5_SDC_DIMMING_SPEED_SMOOTH[] = {
	0x53,
	0x28	/* 0x28 : Smooth transition */
};

static unsigned char S6E3FC5_SDC_DIMMING_SPEED_NORMAL_AND_HBM_ON[] = {
	0x53,
	0xE0	/* 0xE0 : Normal transition */
};

DEFINE_NDARRAY(S6E3FC5_SDC_DIMMING_SPEED, 2, EXTEND_BRIGHTNESS + 1, 2) = {	/* [mask][brightness][2] */
	{
		[0 ... UI_MAX_BRIGHTNESS]			= { 0x53, 0x28 },	/* 0x28 : Smooth transition */
		[UI_MAX_BRIGHTNESS + 1 ... EXTEND_BRIGHTNESS]	= { 0x53, 0xE0 },	/* 0xE0 : Normal transition */
	}, {
		[0 ... UI_MAX_BRIGHTNESS]			= { 0x53, 0x20 },	/* 0x20 : Normal transition */
		[UI_MAX_BRIGHTNESS + 1 ... EXTEND_BRIGHTNESS]	= { 0x53, 0xE0 },	/* 0xE0 : Normal transition */
	},
};

static unsigned char S6E3FC5_SDC_ACL_SETTING[] = {
	0x66,
	0x01, 0x6D
};

static unsigned char S6E3FC5_SDC_ACL_OFF[] = {
	0x55,
	0x00	/* 0x00 : ACL Off */
};

static unsigned char S6E3FC5_SDC_ACL_08P[] = {
	0x55,
	0x01	/* 0x01 : ACL 8% */
};

static unsigned char S6E3FC5_SDC_ACL_15P[] = {
	0x55,
	0x03	/* 0x03 : ACL 15% */
};

static unsigned char S6E3FC5_SDC_IRC_FLAT[] = {
	0x6A,
	0x27, 0xA3, 0xFE, 0x8B, 0x8A, 0x80, 0x01
};

static unsigned char S6E3FC5_SDC_IRC_MODERATO[] = {
	0x6A,
	0x27, 0xE3, 0xFE, 0x8B, 0x00, 0x80, 0x01
};

static unsigned char S6E3FC5_SDC_TSET_1[] = {
	0xB0,
	0x00, 0x01, 0xB5
};

static unsigned char S6E3FC5_SDC_TSET_DFT[] = {	/* 1 */
	0xB5,
	0x19
};

static unsigned char S6E3FC5_SDC_TSET_2_MINUS_00[] = {	/* 0 */
	0xB5,
	0x00,
};

static unsigned char S6E3FC5_SDC_TSET_2_MINUS_15[] = {	/* -15 */
	0xB5,
	BIT(7) | 15
};

static unsigned char S6E3FC5_SDC_TSET_2_MINUS_16[] = {	/* -16 */
	0xB5,
	BIT(7) | 16
};

static unsigned char S6E3FC5_SDC_TIG_ENABLE[] = {
	0xBF,
	0x01, 0x00	/* 0x01 : TIG Enable */
};

static unsigned char S6E3FC5_SDC_TIG_DISABLE[] = {
	0xBF,
	0x00, 0x00	/* 0x00 : TIG Disable */
};

static unsigned char S6E3FC5_SDC_AOD_AOR_1[] = {
	0xB0,
	0x00, 0x52, 0x66
};

static unsigned char S6E3FC5_SDC_AOD_AOR_2[] = {
	0x66,
	0x01, 0x16, 0xA8	/* AOR MAX */
};

static unsigned char S6E3FC5_SDC_AOD_AOR_3[] = {
	0x60,
	0x00, 0x00
};

static unsigned char S6E3FC5_SDC_AOD_INIT_1[] = {
	0xB0,
	0x00, 0x7A, 0xF4
};

static unsigned char S6E3FC5_SDC_AOD_INIT_2[] = {
	0xF4,
	0x28
};

static unsigned char S6E3FC5_SDC_AOD_INIT_3[] = {
	0x68,
	0x02
};

static unsigned char S6E3FC5_SDC_AOD_INIT_4[] = {
	0xB0,
	0x00, 0x52, 0x66
};

static unsigned char S6E3FC5_SDC_AOD_INIT_5[] = {
	0x66,
	0x00, 0x00, 0x18	/* AOR */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_60NIT[] = {
	0x53,
	0x24	/* 0x24 : HLPM 60nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_30NIT[] = {
	0x53,
	0x25	/* 0x25 : HLPM 30nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_10NIT[] = {
	0x53,
	0x26	/* 0x26 : HLPM 10nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_02NIT[] = {
	0x53,
	0x27	/* 0x27 : HLPM  2nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_7[] = {
	0xB0,
	0x00, 0x1F, 0xF2
};

static unsigned char S6E3FC5_SDC_AOD_INIT_8[] = {
	0xF2,
	0x02, 0x56
};

static unsigned char S6E3FC5_SDC_AOD_BLACK_FRAME_ON_1[] = {
	0xB0,
	0x00, 0x03, 0xBB
};

static unsigned char S6E3FC5_SDC_AOD_BLACK_FRAME_ON_2[] = {
	0xBB,
	0x05, 0x00, 0x0C
};

static unsigned char S6E3FC5_SDC_AOD_BLACK_FRAME_ON_3[] = {
	0xF7,
	0x0F,
};

static unsigned char S6E3FC5_SDC_AOD_BLACK_FRAME_OFF_1[] = {
	0xB0,
	0x00, 0x03, 0xBB
};

static unsigned char S6E3FC5_SDC_AOD_BLACK_FRAME_OFF_2[] = {
	0xBB,
	0x05, 0x0C, 0x0C
};

static unsigned char S6E3FC5_SDC_AOD_BLACK_FRAME_OFF_3[] = {
	0xF7,
	0x0F,
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_1[] = {
	0xB0,
	0x00, 0x08, 0xB5
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_2[] = {
	0xB5,
	0x00, 0x00, 0x00
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_3[] = {
	0xB0,
	0x00, 0x1F, 0xF2
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_4[] = {
	0xF2,
	0x02, 0x7E
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_5[] = {
	0x68,
	0x02, 0x01
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_6[] = {
	0xB0,
	0x00, 0x0F, 0x66
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_7[] = {
	0x66,
	0x10	/* 0x10 : Normal transition */
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_8[] = {
	0x53,
	0x20
};

static struct msg_segment MSG_S6E3FC5_SDC_EXIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},
	{MSG_RX(RX_BUF_05, 1:1), },
	{MSG_RX(RX_BUF_0A, 1:1), },
	{MSG_RX(RX_BUF_0E, 1:1), },
	{MSG_RX(RX_BUF_EE, 1:1), },
	{MSG_RX(RX_BUF_E9, 1:2), },
	{MSG_TX(S6E3FC5_SDC_DISPLAY_OFF), MSG_MSLEEP(20)},
	{MSG_TX(S6E3FC5_SDC_SLEEP_IN), MSG_MSLEEP(120)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
};

static struct msg_segment MSG_S6E3FC5_SDC_DISPLAY_ON[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{MSG_TX(S6E3FC5_SDC_DISPLAY_ON)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F), .modes = BIT(MSG_MODE_BLOCKING)},
};

static struct msg_segment MSG_S6E3FC5_SDC_KEY_ON[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_KEY_OFF[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
};

static struct msg_segment MSG_S6E3FC5_SDC_KEY_OFF_BLOCKING[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F), .modes = BIT(MSG_MODE_BLOCKING)},
};

static struct msg_segment MSG_S6E3FC5_SDC_INIT[] = {
//Sleep Out(11h)
	{MSG_TX(S6E3FC5_SDC_SLEEP_OUT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), MSG_MSLEEP(90)},	/* Delay 90ms */

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1 Common Setting
//Note) TE Setting
	{MSG_TX(S6E3FC5_SDC_TE_130US_SHIFT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
//4.1.1 TE(Vsync) ON/OFF
	{MSG_TX(S6E3FC5_SDC_TE_ON), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.2 PAGE ADDRESS SET
	{MSG_TX(S6E3FC5_SDC_PAGE_ADDRESS_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PAGE_ADDRESS_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.3 FFC SET
	{MSG_TX(S6E3FC5_SDC_FFC_806_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_FFC_806_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_FFC_806_3), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_FFC_806_4), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.4 ERR_FG Setting
	{MSG_TX(S6E3FC5_SDC_ERR_FG_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_ERR_FG_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.5 PCD Setting
	{MSG_TX(S6E3FC5_SDC_PCD), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.6 ACL Setting
	{MSG_TX(S6E3FC5_SDC_ACL_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_ACL_2_DIMMING_32FRAME), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.7 DSC Setting
	{MSG_TX(S6E3FC5_SDC_DSC_EN), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), .dsi_msg.type = MIPI_DSI_DCS_COMPRESSION_MODE},
	{MSG_TX(S6E3FC5_SDC_DSC_PPS), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), .dsi_msg.type = MIPI_DSI_PICTURE_PARAMETER_SET, MSG_MSLEEP(1)},

//4.1.8 ASWIRE Pulse Off Setting
	{MSG_TX(S6E3FC5_SDC_ASWIRE_PULSE_OFF_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_ASWIRE_PULSE_OFF_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), MSG_MSLEEP(30)},	/* 10. Wait 30ms */

//4.1.9 TSP VSYNC ENABLE
	{MSG_TX(S6E3FC5_SDC_VSYNC_ENABLE_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_VSYNC_ENABLE_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_VSYNC_ENABLE_3), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_VSYNC_ENABLE_4), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_VSYNC_ENABLE_5), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_VSYNC_ENABLE_6), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.2.0 COMMONT SETTING
	{MSG_TX(S6E3FC5_SDC_COMMON_SETTING), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

#if 0
//4.2 Brightness Setting
//4.2.1 Max & Dimming
	{MSG_TX(S6E3FC5_SDC_60HZ), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_DIMMING_SPEED_SMOOTH), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_BRIGHTNESS_DFT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.2.3 ACL ON/OFF
	{MSG_TX(S6E3FC5_SDC_ACL_SETTING), .modes = BIT(S6E3FC5_SDC_ACL_SETTING)},
	{MSG_TX(S6E3FC5_SDC_ACL_OFF), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.2.5 Moderato Enable
	{MSG_TX(S6E3FC5_SDC_IRC_MODERATO), .modes = BIT(S6E3FC5_SDC_ACL_SETTING)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.3 ELVSS Temp Compensation
	{MSG_TX(S6E3FC5_SDC_TSET_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_TSET_DFT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), MSG_MSLEEP(30)},	/* 10. Wait 30ms */
#endif

	{MSG_RX(RX_BUF_0F, 1:1), },

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
};

static struct msg_segment MSG_S6E3FC5_SDC_FFC_806[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_FFC_806_1)},
	{MSG_TX(S6E3FC5_SDC_FFC_806_2)},
	{MSG_TX(S6E3FC5_SDC_FFC_806_3)},
	{MSG_TX(S6E3FC5_SDC_FFC_806_4)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_FFC_822[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_FFC_822_1)},
	{MSG_TX(S6E3FC5_SDC_FFC_822_2)},
	{MSG_TX(S6E3FC5_SDC_FFC_822_3)},
	{MSG_TX(S6E3FC5_SDC_FFC_822_4)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_FFC_824[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_FFC_824_1)},
	{MSG_TX(S6E3FC5_SDC_FFC_824_2)},
	{MSG_TX(S6E3FC5_SDC_FFC_824_3)},
	{MSG_TX(S6E3FC5_SDC_FFC_824_4)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_NORMAL[] = {
	{MSG_TX(S6E3FC5_SDC_TSET_1)},
	{MSG_TX(S6E3FC5_SDC_TSET_DFT)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_MINUS_00[] = {
	{MSG_TX(S6E3FC5_SDC_TSET_1)},
	{MSG_TX(S6E3FC5_SDC_TSET_2_MINUS_00)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_MINUS_15[] = {
	{MSG_TX(S6E3FC5_SDC_TSET_1)},
	{MSG_TX(S6E3FC5_SDC_TSET_2_MINUS_15)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_MINUS_16[] = {
	{MSG_TX(S6E3FC5_SDC_TSET_1)},
	{MSG_TX(S6E3FC5_SDC_TSET_2_MINUS_16)},
};

static struct msg_segment MSG_S6E3FC5_SDC_ACL_OFF[] = {
	{MSG_TX(S6E3FC5_SDC_ACL_SETTING)},
	{MSG_TX(S6E3FC5_SDC_ACL_OFF)},
};

static struct msg_segment MSG_S6E3FC5_SDC_ACL_08P[] = {
	{MSG_TX(S6E3FC5_SDC_ACL_SETTING)},
	{MSG_TX(S6E3FC5_SDC_ACL_08P)},
};

static struct msg_segment MSG_S6E3FC5_SDC_ACL_15P[] = {
	{MSG_TX(S6E3FC5_SDC_ACL_SETTING)},
	{MSG_TX(S6E3FC5_SDC_ACL_15P)},
};

static struct msg_segment MSG_S6E3FC5_SDC_IRC_FLAT[] = {
	{MSG_TX(S6E3FC5_SDC_IRC_FLAT)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},
};

static struct msg_segment MSG_S6E3FC5_SDC_IRC_MODERATO[] = {
	{MSG_TX(S6E3FC5_SDC_IRC_MODERATO)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},

	{MSG_TX(S6E3FC5_SDC_TIG_ENABLE), MSG_MSLEEP(17)},
	{MSG_TX(S6E3FC5_SDC_DISPLAY_ON), MSG_MSLEEP(17)},
	{MSG_TX(S6E3FC5_SDC_TIG_DISABLE)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F), MSG_MSLEEP(50-17-17)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_60NIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_3)},

	{MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_6_60NIT)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), MSG_USLEEP(1)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_30NIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_3)},

	{MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_6_30NIT)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), MSG_USLEEP(1)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_10NIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_3)},

	{MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_6_10NIT)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), MSG_USLEEP(1)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_02NIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_ON_3)},

	{MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_6_02NIT)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), MSG_USLEEP(1)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_EXIT[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_OFF_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_OFF_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_BLACK_FRAME_OFF_3)},

	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_1)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_2)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_3)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_4)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_5)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_6)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_7)},
	{MSG_TX(S6E3FC5_SDC_AOD_EXIT_8)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), MSG_MSLEEP(67)},	/* Delay 33.3ms */

#if 0
	{MSG_TX(S6E3FC5_SDC_60HZ)},
	{MSG_TX(S6E3FC5_SDC_BRIGHTNESS_DFT)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), MSG_USLEEP(1)},
#endif

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static unsigned char S6E3FC5_SDC_NO_TE_FRAME_SEL[] = {
	0xB9,
	0x04, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x00, 0x0F, 0x09, 0x0F, 0x00, 0x0F
};

static unsigned char S6E3FC5_SDC_60PHS_TE_FRAME_SEL_1_SKIP[] = {
	0xB9,
	0x51, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x00, 0x0F
};

static unsigned char S6E3FC5_SDC_GLUT_SET_SELECTION_1[] = {
	0xB0,
	0x00, 0x06, 0x68
};

static unsigned char S6E3FC5_SDC_GLUT_SET_SELECTION_2[] = {
	0x68,
	0x05,	/* 0x05 : 120Hz GLUT Set for 60Hz */
};

static unsigned char S6E3FC5_SDC_GAMMA_TUNE_1[] = {
	0xB0,
	0x00, 0xA5, 0x67
};

static unsigned char S6E3FC5_SDC_GAMMA_TUNE_2_DISABLE[] = {
	0x67,
	0x00	/* 0x00 : HS120 - Analog Gamma Tune Disable */
};

static unsigned char S6E3FC5_SDC_GAMMA_TUNE_2_ENABLE[] = {
	0x67,
	0x01	/* 0x01 : HS60 - Analog Gamma Tune Enable */
};

static unsigned char S6E3FC5_SDC_GAMMA_1[] = {
	0xB0,
	0x00, 0xA6, 0x67
};

static struct msg_segment MSG_S6E3FC5_SDC_DISP_MODE_120HS[] = {
	{MSG_TX(S6E3FC5_SDC_120HZ)},
	{MSG_TX(S6E3FC5_SDC_NO_TE_FRAME_SEL)},
	{MSG_TX(S6E3FC5_SDC_GAMMA_TUNE_1)},
	{MSG_TX(S6E3FC5_SDC_GAMMA_TUNE_2_DISABLE)},
};

static struct msg_segment MSG_S6E3FC5_SDC_DISP_MODE_60HS[] = {
	{MSG_TX(S6E3FC5_SDC_60HZ)},
	{MSG_TX(S6E3FC5_SDC_GLUT_SET_SELECTION_1)},
	{MSG_TX(S6E3FC5_SDC_GLUT_SET_SELECTION_2)},
	{MSG_TX(S6E3FC5_SDC_NO_TE_FRAME_SEL)},
	{MSG_TX(S6E3FC5_SDC_GAMMA_TUNE_1)},
	{MSG_TX(S6E3FC5_SDC_GAMMA_TUNE_2_ENABLE)},

	{MSG_TX(S6E3FC5_SDC_GAMMA_1)},
	{ .ndarray = &S6E3FC5_SDC_GAMMA_NDARRAY, },
};

static struct msg_segment MSG_S6E3FC5_SDC_DISP_MODE_60PHS[] = {
	{MSG_TX(S6E3FC5_SDC_120HZ)},
	{MSG_TX(S6E3FC5_SDC_60PHS_TE_FRAME_SEL_1_SKIP)},
	{MSG_TX(S6E3FC5_SDC_GAMMA_TUNE_1)},
	{MSG_TX(S6E3FC5_SDC_GAMMA_TUNE_2_DISABLE)},
};

static struct msg_segment MSG_S6E3FC5_SDC_DISP_MODE_60[] = {
	{MSG_TX(S6E3FC5_SDC_60HZ)},
};

static struct msg_segment MSG_S6E3FC5_SDC_DISP_MODE_120[] = {
	{MSG_TX(S6E3FC5_SDC_120HZ)},
};

static struct msg_segment MSG_S6E3FC5_SDC_SINGLE_COMMAND[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},
	{MSG_TX(S6E3FC5_SDC_120HZ)},
	{MSG_TX(S6E3FC5_SDC_60HZ)},
	{ .ndarray = &S6E3FC5_SDC_BRIGHTNESS_NDARRAY, },
	{ .ndarray = &S6E3FC5_SDC_DIMMING_SPEED_NDARRAY, },
	{ .ndarray = &S6E3FC5_SDC_DIMMING_SPEED_NDARRAY, .modes = BIT(MSG_MODE_BLOCKING)},
};

enum {
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_ON_9F)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_ON_F0)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_ON_FC)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_OFF_9F)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_OFF_F0)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_OFF_FC)
	ENUM_APPEND(MSG_S6E3FC5_SDC_PANEL_UPDATE)
	ENUM_APPEND(MSG_S6E3FC5_SDC_120HZ)
	ENUM_APPEND(MSG_S6E3FC5_SDC_60HZ)
	ENUM_APPEND(MSG_S6E3FC5_SDC_BRIGHTNESS)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DIMMING_SPEED)
	ENUM_APPEND(MSG_S6E3FC5_SDC_PREPARE_FINGER_PRINT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISPLAY_ON)
	ENUM_APPEND(MSG_S6E3FC5_SDC_EXIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_INIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_KEY_ON)
	ENUM_APPEND(MSG_S6E3FC5_SDC_KEY_OFF)
	ENUM_APPEND(MSG_S6E3FC5_SDC_KEY_OFF_BLOCKING)
	ENUM_APPEND(MSG_S6E3FC5_SDC_ACL_OFF)
	ENUM_APPEND(MSG_S6E3FC5_SDC_ACL_08P)
	ENUM_APPEND(MSG_S6E3FC5_SDC_ACL_15P)
	ENUM_APPEND(MSG_S6E3FC5_SDC_IRC_FLAT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_IRC_MODERATO)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_60NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_30NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_10NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_02NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_EXIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_NORMAL)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_MINUS_00)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_MINUS_15)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_MINUS_16)
	ENUM_APPEND(MSG_S6E3FC5_SDC_FFC_806)
	ENUM_APPEND(MSG_S6E3FC5_SDC_FFC_822)
	ENUM_APPEND(MSG_S6E3FC5_SDC_FFC_824)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISP_MODE_60)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISP_MODE_120)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISP_MODE_60HS)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISP_MODE_120HS)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISP_MODE_60PHS)
};

static struct msg_package PACKAGE_S6E3FC5_SDC[] = {
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TEST_KEY_ON_9F)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TEST_KEY_ON_F0)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TEST_KEY_ON_FC)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TEST_KEY_OFF_9F)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TEST_KEY_OFF_F0)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TEST_KEY_OFF_FC)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_PANEL_UPDATE)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_120HZ)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_60HZ)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_BRIGHTNESS)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DIMMING_SPEED)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_PREPARE_FINGER_PRINT)], 1)},
	{ADDRESS(MSG_S6E3FC5_SDC_DISPLAY_ON)},
	{ADDRESS(MSG_S6E3FC5_SDC_EXIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_INIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_KEY_ON)},
	{ADDRESS(MSG_S6E3FC5_SDC_KEY_OFF)},
	{ADDRESS(MSG_S6E3FC5_SDC_KEY_OFF_BLOCKING)},
	{ADDRESS(MSG_S6E3FC5_SDC_ACL_OFF)},
	{ADDRESS(MSG_S6E3FC5_SDC_ACL_08P)},
	{ADDRESS(MSG_S6E3FC5_SDC_ACL_15P)},
	{ADDRESS(MSG_S6E3FC5_SDC_IRC_FLAT)},
	{ADDRESS(MSG_S6E3FC5_SDC_IRC_MODERATO)},
	{ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_60NIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_30NIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_10NIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_02NIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_AOD_EXIT)},
	{ADDRESS(MSG_S6E3FC5_SDC_TSET_NORMAL)},
	{ADDRESS(MSG_S6E3FC5_SDC_TSET_MINUS_00)},
	{ADDRESS(MSG_S6E3FC5_SDC_TSET_MINUS_15)},
	{ADDRESS(MSG_S6E3FC5_SDC_TSET_MINUS_16)},
	{ADDRESS(MSG_S6E3FC5_SDC_FFC_806)},
	{ADDRESS(MSG_S6E3FC5_SDC_FFC_822)},
	{ADDRESS(MSG_S6E3FC5_SDC_FFC_824)},
	{ADDRESS(MSG_S6E3FC5_SDC_DISP_MODE_60)},
	{ADDRESS(MSG_S6E3FC5_SDC_DISP_MODE_120)},
	{ADDRESS(MSG_S6E3FC5_SDC_DISP_MODE_60HS)},
	{ADDRESS(MSG_S6E3FC5_SDC_DISP_MODE_120HS)},
	{ADDRESS(MSG_S6E3FC5_SDC_DISP_MODE_60PHS)},
};

#define LCD_CONFIG_INDEX_60PHS	LCD_CONFIG_1

#define CASE	0

#if CASE == 0
static unsigned int disp_mode_table[] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_120),
};
#elif CASE == 1
static unsigned int disp_mode_table[] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60PHS),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60PHS),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_120HS),
};
#elif CASE == 2
static unsigned int disp_mode_table[] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60HS),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60HS),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_120HS),
};
#elif CASE == 3
static unsigned int disp_mode_table[] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60HS),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_60PHS),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_DISP_MODE_120HS),
};
#endif

#if defined(CONFIG_SMCDSD_DOZE)
enum {
	ALPM_OFF,
	ALPM_ON_LOW,	/* ALPM 2 NIT */
	HLPM_ON_LOW,	/* HLPM 2 NIT */
	ALPM_ON_HIGH,	/* ALPM 60 NIT */
	HLPM_ON_HIGH,	/* HLPM 60 NIT */
	ALPM_MODE_MAX
};

enum {
	AOD_MODE_OFF,
	AOD_MODE_ALPM,
	AOD_MODE_HLPM,
	AOD_MODE_MAX
};

static char *AOD_HLPM_STATE_NAME[] = {
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT)] = "AOD_INIT_02NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_10NIT)] = "AOD_INIT_10NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_30NIT)] = "AOD_INIT_30NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT)] = "AOD_INIT_60NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_EXIT)] = "AOD_EXIT",
};

static unsigned int lpm_old_table[ALPM_MODE_MAX] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_EXIT),	/* FAC 4, 2, 0 = 60NIT, 2NIT, EXIT */
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT),
};

static unsigned int lpm_init_table[EXTEND_BRIGHTNESS + 1] = {
	[0 ... 10]			= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT),
	[11 ... 27]			= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_10NIT),
	[28 ... 48]			= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_30NIT),
	[49 ... EXTEND_BRIGHTNESS]	= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT),
};

static unsigned int lpm_exit_table[EXTEND_BRIGHTNESS + 1] = {
	[0 ... EXTEND_BRIGHTNESS]	= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_EXIT),
};
#endif

static unsigned int acl_table[4][2] = {	/* [acl][mask] */
	[0] = { GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF), GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF) },
	[1] = { GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_08P), GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF) },
	[2] = { GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_15P), GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF) },
	[3] = { GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_15P), GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF) },
};

static unsigned int irc_table[2] = {	/* irc_mode */
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_IRC_MODERATO),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_IRC_FLAT),
};

#define TEMPERATURE_UP(_degree)	(_degree + NORMAL_TEMPERATURE)

static unsigned int tset_table[] = {
	[TEMPERATURE_UP(1) ... TEMPERATURE_UP(25)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_NORMAL),
	[TEMPERATURE_UP(0)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_MINUS_00),
	[TEMPERATURE_UP(-15) ... TEMPERATURE_UP(-1)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_MINUS_15),
	[TEMPERATURE_UP(-16)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_MINUS_16),
};

#if defined(CONFIG_SMCDSD_DYNAMIC_MIPI)
static unsigned int ffc_table[FREQ_IDX_MAX] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_FFC_806),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_FFC_822),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_FFC_824),
};
#endif

static unsigned char S6E3FC5_SDC_CCD_01[] = {0xCC, 0x01, 0x5C, 0x51 };
static unsigned char S6E3FC5_SDC_CCD_02[] = {0xCD, 0x00 };		/* 0x00 OR 0x08 : OK */ /* Others : NG */
//static unsigned char S6E3FC5_SDC_CCD_03[] = {0xCC, 0x02, 0x4C, 0x51 };

static unsigned char S6E3FC5_SDC_CRC_01[] = {0x2A, 0x00, 0x00, 0x04, 0x37 };
static unsigned char S6E3FC5_SDC_CRC_02[] = {0x2B, 0x00, 0x00, 0x09, 0x23 };
static unsigned char S6E3FC5_SDC_CRC_03[] = {0x2C, 0x00 };
static unsigned char S6E3FC5_SDC_CRC_04[] = {0xBE, 0x05 };
static unsigned char S6E3FC5_SDC_CRC_05[] = {0xBE, 0x00 };
static unsigned char S6E3FC5_SDC_CRC_06[] = {0xBE, 0x07 };
static unsigned char S6E3FC5_SDC_CRC_07[] = {0xB0, 0x00, 0x27, 0xD8 };
static unsigned char S6E3FC5_SDC_CRC_08[] = {0xD8, 0x11 };
static unsigned char S6E3FC5_SDC_CRC_09[] = {0x14, 0x00, 0x00 };	/* 0xF6, 0x17 : OK */ /* Others : NG */
static unsigned char S6E3FC5_SDC_CRC_10[] = {0xB0, 0x00, 0x27, 0xD8 };
static unsigned char S6E3FC5_SDC_CRC_11[] = {0xD8, 0x20 };
static unsigned char S6E3FC5_SDC_CRC_12[] = {0x15, 0x00, 0x00 };	/* 0xB7, 0xAA : OK */ /* Others : NG */
static unsigned char S6E3FC5_SDC_CRC_13[] = {0xB0, 0x00, 0x02, 0xD7 };
static unsigned char S6E3FC5_SDC_CRC_14[] = {0xD7, 0x04 };
static unsigned char S6E3FC5_SDC_CRC_14_USER[] = {0xD7, 0x00 };
static unsigned char S6E3FC5_SDC_CRC_15[] = {0xBE, 0x05 };
static unsigned char S6E3FC5_SDC_CRC_16[] = {0xBE, 0x00 };
static unsigned char S6E3FC5_SDC_CRC_17[] = {0xBE, 0x07 };
static unsigned char S6E3FC5_SDC_CRC_18[] = {0xB0, 0x00, 0x27, 0xD8 };
static unsigned char S6E3FC5_SDC_CRC_19[] = {0xD8, 0x11 };
static unsigned char S6E3FC5_SDC_CRC_20[] = {0x14, 0x00, 0x00 };	/* 0xF6, 0x17 : OK */ /* Others : NG */
static unsigned char S6E3FC5_SDC_CRC_21[] = {0xB0, 0x00, 0x27, 0xD8 };
static unsigned char S6E3FC5_SDC_CRC_22[] = {0xD8, 0x20 };
static unsigned char S6E3FC5_SDC_CRC_23[] = {0x15, 0x00, 0x00 };	/* 0xB7, 0xAA : OK */ /* Others : NG */

static unsigned char S6E3FC5_SDC_CRC_24[] = {0xBE, 0x00 };
static unsigned char S6E3FC5_SDC_CRC_25[] = {0xB0, 0x00, 0x02, 0xD7 };
static unsigned char S6E3FC5_SDC_CRC_26[] = {0xD7, 0x00 };

static unsigned char S6E3FC5_SDC_ECC_01[] = {0xB0, 0x00, 0x02, 0xF8 };
static unsigned char S6E3FC5_SDC_ECC_02[] = {0xF8, 0x01 };
static unsigned char S6E3FC5_SDC_ECC_03[] = {0xB0, 0x00, 0x04, 0xF8 };
static unsigned char S6E3FC5_SDC_ECC_04[] = {0xF8, 0x00 };		/* 0x00 : OK */ /* Others : NG */
static unsigned char S6E3FC5_SDC_ECC_05[] = {0xB0, 0x00, 0x02, 0xF8 };
static unsigned char S6E3FC5_SDC_ECC_06[] = {0xF8, 0x00 };

static struct abd_bit_info fac_check_list[] = {
	//1. CCD TEST (@Factory Binary)
	{.invert = 0x08, .name = "ccd_state",},	/* 0x00 OR 0x08 : OK */
	{.invert = 0x00, .name = "ccd_state",},

	//2-1. CRC TEST (@Factory Binary)
#if 0
	{.invert = 0x17F6, .name = "dsc_crc",},	/* 0xF6, 0x17 : OK */
	{.invert = 0xAAB7, .name = "dsc_crc",},	/* 0xB7, 0xAA : OK */
	{.invert = 0x17F6, .name = "dsc_crc",},	/* 0xF6, 0x17 : OK */
	{.invert = 0xAAB7, .name = "dsc_crc",},	/* 0xB7, 0xAA : OK */
#endif
	{.invert = 0xAAB717F6AAB717F6, .name = "dsc_crc",},

	//2. ECC TEST (@Factory Binary)
	{.invert = 0x00, .name = "ecc",},	/* 0x00 : OK */
};

static struct msg_segment MSG_S6E3FC5_SDC_CCD[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_CCD_01), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(20)},
	{MSG_RX(S6E3FC5_SDC_CCD_02), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 1},
	{MSG_TX(S6E3FC5_SDC_PCD), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(20)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0), .modes = BIT(MSG_MODE_BLOCKING)},
};

static struct msg_segment MSG_S6E3FC5_SDC_CRC[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_CRC_01), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_02), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_03), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_04), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_05), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_06), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_07), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_08), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_09), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},
	{MSG_TX(S6E3FC5_SDC_CRC_10), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_11), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_12), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_13), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_14), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_15), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_16), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_17), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_18), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_19), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_20), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},
	{MSG_TX(S6E3FC5_SDC_CRC_21), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_22), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_23), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},

	{MSG_TX(S6E3FC5_SDC_CRC_24), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_25), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_26), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0), .modes = BIT(MSG_MODE_BLOCKING)},
};

static struct msg_segment MSG_S6E3FC5_SDC_CRC_USER[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_CRC_01), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_02), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_03), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_04), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_05), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_06), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_07), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_08), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_09), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},
	{MSG_TX(S6E3FC5_SDC_CRC_10), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_11), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_12), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_13), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_14_USER), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_15), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_16), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_TX(S6E3FC5_SDC_CRC_17), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_18), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_19), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_20), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},
	{MSG_TX(S6E3FC5_SDC_CRC_21), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_22), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_MSLEEP(50)},
	{MSG_RX(S6E3FC5_SDC_CRC_23), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 2},

	{MSG_TX(S6E3FC5_SDC_CRC_24), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_25), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_CRC_26), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0), .modes = BIT(MSG_MODE_BLOCKING)},
};

static struct msg_segment MSG_S6E3FC5_SDC_ECC[] = {
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_ECC_01), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_ECC_02), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_ECC_03), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_RX(S6E3FC5_SDC_ECC_04), .modes = BIT(MSG_MODE_BLOCKING), .dsi_msg.rx_len = 1},
	{MSG_TX(S6E3FC5_SDC_ECC_05), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_ECC_06), .modes = BIT(MSG_MODE_BLOCKING)},

	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC), .modes = BIT(MSG_MODE_BLOCKING)},
	{MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0), .modes = BIT(MSG_MODE_BLOCKING)},
};

#endif /* __S6E3FC5_SDC_PARAM_H__ */
